diameter(gd) #11
E(g)
?E()
#i
strength(g,"A","B")
?strength()
V(E(g))
strength(g)
###################################################################################
#
# HW2 sol.R
#
###################################################################################
# External Functions
###################################################################################
library(igraph)
###################################################################################
# Internal Functions
###################################################################################
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
###################################################################################
# Processing
###################################################################################
#1
g = graph_from_literal(A-B,C-X, C-Y,A-X, A-Y, A-Z,B-X,B-Y)
V(g)
set.seed(23);plot(g)
#a
E(g)$weight # Null
E(g)$weight=E(g)  #Let weight be the internal value of the edges
E(g)$weight # 1 2 3 4 5 6 7 8
#b
(h=induced_subgraph(g,c('A','B','X','Y')))
par(mfrow=c(1,2))
set.seed(23);plot(g,main="Original");plot(h, main="Induced Subgraph")
par(mfrow=c(1,1))
#c
#Graph attribute
g$name="Orderd Graph"
g$description  = "Same graph as asignment one just having ordered vertics"
#Vertex attributes
V(g)$color = c('red','pink','black','white','gray','yellow')
set.seed(23);plot(g, main=g$name ,  sub=g$description  )
#d
neighbors(g, 'A')
#e
degree(g,'Y')  #3
strength(g,'Y') #17
#f
# B-Y-A-X-B-A-Z
# No repeated edge
# Repeated Vertic  # Hence trail
# A-X-B-Y-A?
# Same Start and end vertic
# No repeated edge
# No repeated vertic # Hence cycle
# B-A-Y-C-X-A-B?
# Same Start and end vertic
# No repeated edge
# repeated vertic # Hence circuit
# What is the length of the last one?
distances(g,'B','B', weights=NA)  #0        #Undirected distances
#g
distances(g,'B','Y', weights=NA)  #1
# weighted distance
distances(g,'B','Y')  #4
#h
#Undirected diameter
diameter(g,weights=NA) #3
#i
strength(g)
#i
s = strength(g)
diameter(g,weights=s)
strength(g, weights=NA)
?diameter()
diameter(g)
diameter(s)
#i
s = strength(g)
s2 = strength(g, weights=NA)
s
diameter(g)
###################################################################################
#
# HW2 sol.R
#
###################################################################################
# External Functions
###################################################################################
library(igraph)
###################################################################################
# Internal Functions
###################################################################################
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
###################################################################################
# Processing
###################################################################################
#1
g = graph_from_literal(A-B,C-X, C-Y,A-X, A-Y, A-Z,B-X,B-Y)
V(g)
set.seed(23);plot(g)
#a
E(g)$weight # Null
E(g)$weight=E(g)  #Let weight be the internal value of the edges
E(g)$weight # 1 2 3 4 5 6 7 8
#b
(h=induced_subgraph(g,c('A','B','X','Y')))
par(mfrow=c(1,2))
set.seed(23);plot(g,main="Original");plot(h, main="Induced Subgraph")
par(mfrow=c(1,1))
#c
#Graph attribute
g$name="Orderd Graph"
g$description  = "Same graph as asignment one just having ordered vertics"
#Vertex attributes
V(g)$color = c('red','pink','black','white','gray','yellow')
?strength()
DistGraph(g, dist.method="shortest.paths")
as_adj(gd)
as_adj(g,sparse=F)
as_adj(gd,attr="weight",sparse=F)
as_adj(gd,attr="weight",sparse=F)
###################################################################################
#
# HW2 sol.R
#
###################################################################################
# External Functions
###################################################################################
library(igraph)
###################################################################################
# Internal Functions
###################################################################################
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
###################################################################################
# Processing
###################################################################################
#1
g = graph_from_literal(A-B,C-X, C-Y,A-X, A-Y, A-Z,B-X,B-Y)
V(g)
set.seed(23);plot(g)
#a
E(g)$weight # Null
E(g)$weight=E(g)  #Let weight be the internal value of the edges
E(g)$weight # 1 2 3 4 5 6 7 8
#b
(h=induced_subgraph(g,c('A','B','X','Y')))
par(mfrow=c(1,2))
set.seed(23);plot(g,main="Original");plot(h, main="Induced Subgraph")
par(mfrow=c(1,1))
#c
#Graph attribute
g$name="Orderd Graph"
g$description  = "Same graph as asignment one just having ordered vertics"
#Vertex attributes
V(g)$color = c('red','pink','black','white','gray','yellow')
set.seed(23);plot(g, main=g$name ,  sub=g$description  )
#d
neighbors(g, 'A')
#e
degree(g,'Y')  #3
strength(g,'Y') #17
#f
# B-Y-A-X-B-A-Z
# No repeated edge
# Repeated Vertic  # Hence trail
# A-X-B-Y-A?
# Same Start and end vertic
# No repeated edge
# No repeated vertic # Hence cycle
# B-A-Y-C-X-A-B?
# Same Start and end vertic
# No repeated edge
# repeated vertic # Hence circuit
# What is the length of the last one?
distances(g,'B','B', weights=NA)  #0        #Undirected distances
#g
distances(g,'B','Y', weights=NA)  #1
# weighted distance
distances(g,'B','Y')  #4
#h
#Undirected diameter
diameter(g,weights=NA) #3
#i
s = strength(g)
s2 = strength(g, weights=NA)
diameter(g)
#2
gd <- graph_from_literal(1-+2,1-+3,3-+2,3+-+4,4-+2,2-+5)
E(gd)
E(gd)$weight = c(20,2,5,5,3,1,3)
E(gd)$label =E(gd)$weight
set.seed(34);plot(gd,main="Digraph")
#a
degree(gd,3,mode="in") # 3 | 2 # EDGE 3 AND 3 are incident in
strength(gd,3,mode="in") # 3 | 5  # overall 3+2 =5 combined weight of edgies
#b
# 3-4-2-3
# Same strat and end vertics
# No repated edges
# No repeated vertics
# => Cycle
#c
distances(gd,4,2,weights=NA,mode="out") # 1
#d
distances(gd,1,2,weights=NA,mode="out") # 1-2
#e
distances(gd,1,2,mode="out") # 6 #  Path 1-3-4-2
#f
is_connected(gd,mode="weak") # true
is_connected(gd,mode="strong") # False
#g
as_adj(gd)
as_adj(g,sparse=F)
as_adj(gd,attr="weight",sparse=F)
E(gd)
distances(gd,E(gd),mode="out")
#h
#Diameter (directed)
diameter(gd, weights=NA)
#i
diameter(gd) #11
as_adj(gd,attr="weight",sparse=F)
###################################################################################
#
# Lecture2.R
#
###################################################################################
# External Functions
###################################################################################
library(igraph)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
# adj_book: Create an adjacency matrix from a graph according to the definitions
#           in the book
###################################################################################
adj_book<-function(g,...) {
m=as.matrix(as_adj(g,...))
if (is.directed(g)) t(m) else m+diag(diag(m))
}
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
###################################################################################
# Processing
###################################################################################
# The Adjacency Matrix
###################################################################################
g <- graph_from_literal(1-2,2-3:4,3-4:5:6,5-1)
set.seed(23);plot(g)
as_adj(g)                  #Adjacency Matrix
as_adj(g,sparse=F)         #Adjacency Matrix as a matrix
#multigraph
is_simple(g)               #The previous graph is a simple graph
gm <- graph_from_literal(1-2,2-2:3:3:4,3-4:5:6,5-1:1:1,6-6,simplify=F)
is_simple(gm)              #This graph is a mult1graph
set.seed(23);plot(gm, main="Multigraph")
as_adj(gm)
as_adj(gm,sparse=F)
adj_book(gm)
#Digraph
gd <- graph_from_literal(1-+3-+2-+6-+4-+1,4-+5-+3,5+-6)
set.seed(23);plot(gd,main="Digraph")
as_adj(gd)
as_adj(gd,sparse=F)
adj_book(gd)               #Different ordering from the book
gd <- make_graph(c(1,3,3,2,2,6,6,4,4,1,4,5,5,3,6,5))
adj_book(gd)               #Same ordering as the book
#Weighted matrix
E(g)
as.integer(E(g))
E(g)$weight=E(g)          #Let weight be the internal value of the edges
E(g)$label=E(g)           #Let label also be the internal value of the edges
set.seed(23);plot(g, main="Graph with Weights")
as_adj(g,attr="weight")
adj_book(g,attr="weight") #No difference due to symmetry
g=delete_edge_attr(g,"label") #Delete edge attribute label
###################################################################################
# Subgraphs
###################################################################################
set.seed(23);plot(g)
(h=induced_subgraph(g,c(1:3,5)))
plot(h, main="Induced Subgraph")
par(mfrow=c(1,2))
set.seed(23);plot(g,main="Original");plot(h, main="Induced Subgraph")
par(parSave)
###################################################################################
# Decorating Graphs
###################################################################################
g$name="Test Graph"   #Graph attribute
g$descr="We use this graph to test some aspects of graphs."
#Vertex attributes
V(g)$label=c("Joe","Jill","Pete","Jack","Mary","Rick")
V(g)$gender=c("M","F",rep("M",2),"F","M")
#Edge attribute
E(g)$group=c("family","friends",rep("work",3),rep("family",2))
set.seed(23);plot(g,main=g$name)
save(g,file="../data/g.RData")
save(gd,file="../data/gd.RData")
###################################################################################
# Basic Graph Concepts
###################################################################################
g2=g
V(g2)$name=V(g2)$label
g2=g2+edge("Jill","Mary")
E(g2)$weight=E(g2)
E(g2)$label=E(g2)
iSave=igraph_options(vertex.size=30)
set.seed(23);plot(g2)
igraph_options(iSave)    #Back to defaults
#Neighbors
neighbors(g2, "Jack")   #Can check only one
adjacent_vertices(g2,c("Jack","Joe"))   #Checks multiple vertices
#Degrees of each vertex of the graph
degree(g2)
#Strength of each vertex of the graph
strength(g2)
#Connected?
is_connected(g2)
#Distances
distances(g2, weights=NA)  #Normal distances
distances(g2)              #Distances using weights instead
diameter(g2,weights=NA)
diameter(g2)               #Diameter using weights
############
#Digraphs
gd2=gd+edge(5,4,1,5)
E(gd2)$weight=E(gd2)
E(gd2)$label=E(gd2)
set.seed(99);plot(gd2)
degree(gd2,mode="in")
degree(gd2,3,mode="in")
degree(gd2,mode="out")
degree(gd2,3,mode="out")
degree(gd2)       #Degrees of the underlying undirected graph
degree(gd2,3)
#This will give "Inf" if 6 is not reachable from 1
#Mode is "out" for directed distances
distances(gd2,1,6,weights=NA,mode="out")
#Vertices on the shortest path from 1 to 6
shortest_paths(gd2,1,6,weights=NA)
#Vertices on the shortest path from 1 to 6
shortest_paths(gd2,1,6,weights=NA)
#g
distance_table(gd, directed = TRUE)
?distance_table()
#g
distance_table(gd, directed = TRUE, weights=NA)
#g
distance_table(gd, directed = TRUE, weights=NA)
#g
distance_table(gd, directed = TRUE)
g <- make_ring(10)
set.seed(23);plot(g)
distances(g)
shortest_paths(g, 5)
mean_distance(g)
## Weighted shortest paths
el <- matrix(nc=3, byrow=TRUE,
c(1,2,0, 1,3,2, 1,4,1, 2,3,0, 2,5,5, 2,6,2, 3,2,1, 3,4,1,
3,7,1, 4,3,0, 4,7,2, 5,6,2, 5,8,8, 6,3,2, 6,7,1, 6,9,1,
6,10,3, 8,6,1, 8,9,1, 9,10,4) )
g2 <- add_edges(make_empty_graph(10), t(el[,1:2]), weight=el[,3])
distance(g)
###################################################################################
#
# HW2 sol.R
#
###################################################################################
# External Functions
###################################################################################
library(igraph)
###################################################################################
# Internal Functions
###################################################################################
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
###################################################################################
# Processing
###################################################################################
#1
g = graph_from_literal(A-B,C-X, C-Y,A-X, A-Y, A-Z,B-X,B-Y)
V(g)
set.seed(23);plot(g)
#a
E(g)$weight # Null
E(g)$weight=E(g)  #Let weight be the internal value of the edges
E(g)$weight # 1 2 3 4 5 6 7 8
#b
(h=induced_subgraph(g,c('A','B','X','Y')))
par(mfrow=c(1,2))
set.seed(23);plot(g,main="Original");plot(h, main="Induced Subgraph")
par(mfrow=c(1,1))
#c
#Graph attribute
g$name="Orderd Graph"
g$description  = "Same graph as asignment one just having ordered vertics"
#Vertex attributes
V(g)$color = c('red','pink','black','white','gray','yellow')
set.seed(23);plot(g, main=g$name ,  sub=g$description  )
#d
neighbors(g, 'A')
#e
degree(g,'Y')  #3
strength(g,'Y') #17
#f
# B-Y-A-X-B-A-Z
# No repeated edge
# Repeated Vertic  # Hence trail
# A-X-B-Y-A?
# Same Start and end vertic
# No repeated edge
# No repeated vertic # Hence cycle
# B-A-Y-C-X-A-B?
# Same Start and end vertic
# No repeated edge
# repeated vertic # Hence circuit
# What is the length of the last one?
distances(g,'B','B', weights=NA)  #0        #Undirected distances
#g
distances(g,'B','Y', weights=NA)  #1
# weighted distance
distances(g,'B','Y')  #4
#h
#Undirected diameter
diameter(g,weights=NA) #3
#i
s = strength(g)
s2 = strength(g, weights=NA)
diameter(g)
#2
gd <- graph_from_literal(1-+2,1-+3,3-+2,3+-+4,4-+2,2-+5)
E(gd)
E(gd)$weight = c(20,2,5,5,3,1,3)
E(gd)$label =E(gd)$weight
set.seed(34);plot(gd,main="Digraph")
#a
degree(gd,3,mode="in") # 3 | 2 # EDGE 3 AND 3 are incident in
strength(gd,3,mode="in") # 3 | 5  # overall 3+2 =5 combined weight of edgies
#b
# 3-4-2-3
# Same strat and end vertics
# No repated edges
# No repeated vertics
# => Cycle
#c
distances(gd,4,2,weights=NA,mode="out") # 1
#d
distances(gd,1,2,weights=NA,mode="out") # 1-2
#e
distances(gd,1,2,mode="out") # 6 #  Path 1-3-4-2
#f
is_connected(gd,mode="weak") # true
is_connected(gd,mode="strong") # False
#g
distance_table(gd, directed = TRUE)
distance(g)
as_adj(gd)
as_adj(g,sparse=F)
as_adj(gd,attr="weight",sparse=F)
E(gd)
distances(gd,E(gd),mode="out")
#h
#Diameter (directed)
diameter(gd, weights=NA)
#i
diameter(gd) #11
distance(g)
distances(g)
distances(d)
distances(gd)
#g
distances(gd, weights=NA)  #Normal distances
distances(gd)
#g
distances(gd, weights=NA,mode="out")  #Normal distances
distances(g2,mode="out")              #Distances using weights instead
distances(gd,mode="out")              #Distances using weights instead
s = strength(g)
s
s2 = strength(g, weights=NA)
s2
diameter(g)
diameter(g)
get_diameter(g, weights=NA)
get_diameter(g, weights=s)
get_diameter(g, weights=NA)
get_diameter(g)
diameter(g)
diameter(s)
diameter(s2)
#i
= strength(g)
#i
strength(g)
strength(g, weights=NA)
diameter(g)
