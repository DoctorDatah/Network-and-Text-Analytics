library(igraph)
###################################################################################
# Internal Functions
###################################################################################
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
###################################################################################
# Processing
###################################################################################
?igraph
help(package="igraph")
#colors
colors()
palette()
###################################################################################
# Networks in R - Basics
###################################################################################
# A simple undirected graph
g <- graph_from_literal(Jon-Mary, Jon-Mike)
g
set.seed(23);plot(g,main="G Undirected")
# A simple digraph
dg <- graph_from_literal(Jon-+Mary, Jon-+Mike)
dg
set.seed(23);plot(dg,main="G a Digraph")
V(g)                      #vertices of g
E(g)                      #Edges of g
E(dg)
summary(g)                #Summary of g
gorder(g)                 #Order of g (# of vertices)
gsize(g)                  #Size of g (# of edges)
incident(g,"Jon")         #All edges incident on Jon
incident(g,"Mary")        #All edges incident on Mary
###################################################################################
# Creating Network Graphs
###################################################################################
# A simple undirected graph
g <- graph_from_literal(Alice-Bob-Cecil-Alice, Daniel-Cecil-Eugene,
Cecil-Gordon)
g
V(g)                      #Show its vertices
set.seed(23);plot(g)
# Another undirected graph, ":" notation
g2 <- graph_from_literal(Alice-Bob:Cecil:Daniel, Cecil:Daniel-Eugene:Gordon)
g2
set.seed(23);plot(g2)
# A directed graph
g3 <- graph_from_literal(Alice +-+ Bob --+ Cecil +-- Daniel,
Eugene --+ Gordon:Helen)
g3
set.seed(23);plot(g3)
# A graph with isolate vertices
g4 <- graph_from_literal(Alice -- Bob -- Daniel, Cecil:Gordon, Helen)
g4
V(g4)
set.seed(23);plot(g4)
# "Arrows" can be arbitrarily long
g5 <- graph_from_literal(Alice +---------+ Bob,Bob++Helen)
g5
set.seed(23);plot(g5)
# Special vertex names
g6 <- graph_from_literal("+" -- "-", "*" -- "/", "%%" -- "%/%")
g6
V(g6)
set.seed(23);plot(g6)
###################################################################################
# Practice Graphs
###################################################################################
g <- graph_from_literal(1-2,1-3,2-3,2-4,3-5,4-5,4-6,4-7,5-6,6-7)
set.seed(23);plot(g)
summary(g)        #Show a summary
V(g)              #Show its vertices
E(g)              #Show its edges
gorder(g)         #Order of a graph (# of vertices)
gsize(g)          #Size of a graph (# of edges)
dg <- graph_from_literal(Sam-+Mary, Sam-+Tom, Mary++Tom)
dg
set.seed(23);plot(dg)
V(dg)$name        #Vertex names
V(dg)$name <- c("A", "B", "C")  #Change the vertex names
V(dg)
set.seed(23);plot(dg)
dg <- graph_from_literal(Sam-+Mary, Sam-+Tom, Mary++Tom)
V(dg)$label <- c("A", "B", "C")    #Overrides names in plot
summary(dg)
V(dg)$name
set.seed(23);plot(dg)
dg=delete_vertex_attr(dg, "label") #Remove the labels
V(dg)$nums=1:3                     #Create a different attribute
summary(dg)
###################################################################################
# iGraph Options
###################################################################################
?igraph.plotting
iSave=igraph_options(edge.arrow.size=.5,vertex.color="red") #Change the options
set.seed(23);plot(dg)
igraph_options(iSave)    #Back to defaults
###################################################################################
# Multi-Graphs
###################################################################################
set.seed(23);plot(g)
g2=g+vertices(8,9,10)
set.seed(23);plot(g2)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
# adj_book: Create an adjacency matrix from a graph according to the definitions
#           in the book
###################################################################################
adj_book<-function(g,...) {
m=as.matrix(as_adj(g,...))
if (is.directed(g)) t(m) else m+diag(diag(m))
}
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
###################################################################################
# Processing
###################################################################################
# The Adjacency Matrix
###################################################################################
g <- graph_from_literal(1-2,2-3:4,3-4:5:6,5-1)
set.seed(23);plot(g)
as_adj(g)                  #Adjacency Matrix
as_adj(g,sparse=F)         #Adjacency Matrix as a matrix
#multigraph
is_simple(g)               #The previous graph is a simple graph
gm <- graph_from_literal(1-2,2-2:3:3:4,3-4:5:6,5-1:1:1,6-6,simplify=F)
is_simple(gm)              #This graph is a mult1graph
set.seed(23);plot(gm, main="Multigraph")
as_adj(gm)
g <- graph_from_literal(A-B:B:B)
set.seed(23);plot(g)
set.seed(23);plot(gm, main="Multigraph")
###################################################################################
# Processing
###################################################################################
# The Adjacency Matrix
###################################################################################
g <- graph_from_literal(1-2,2-3:4,3-4:5:6,5-1)
set.seed(23);plot(g)
as_adj(g)                  #Adjacency Matrix
as_adj(g,sparse=F)         #Adjacency Matrix as a matrix
#multigraph
is_simple(g)               #The previous graph is a simple graph
g <- graph_from_literal(A-B:B:B,simplify=F)
set.seed(23);plot(g)
g <- graph_from_literal(A-B:B:B,A-C:C:C,A-D:D,D-B-E,simplify=F)
set.seed(23);plot(g)
g <- graph_from_literal(A-B:B:B,A-C:C:C,A-D:D,D-B-E,D-G-F:F,F-B,simplify=F)
set.seed(23);plot(g)
degree(g,"B")
gs <- simplify(g1)
gs <- simplify(g)
E(gs)$label=E(gs)$weight    #Edge label
par(mfrow=c(1,2))
set.seed(23);plot(g1);set.seed(23);plot(gs)
par(parSave)
set.seed(23);plot(g);set.seed(23);plot(gs)
E(gs)$label=E(g)$weight    #Edge label
s
E(gs)$label=E(g)$weight    #Edge label
g <- graph_from_literal(A-B:B:B,A-C:C:C,A-D:D,D-B-E,D-G-F:F,F-B,simplify=F)
set.seed(23);plot(g)
degree(g,"B")
gs <- simplify(g)
E(gs)$label=E(gs)$weight    #Edge label
par(mfrow=c(1,2))
set.seed(23);plot(g);set.seed(23);plot(gs)
par(parSave)
g <- graph_from_literal(A-B:B:B,A-C:C:C,A-D:D,D-B-E,D-G-F:F,F-B,simplify=F)
set.seed(23);plot(g)
degree(g,"B")
E(g)$label=E(g)$weight    #Edge label
gs <- simplify(g)
par(mfrow=c(1,2))
set.seed(23);plot(g);set.seed(23);plot(gs)
par(parSave)
E(g)$label=E(g)$weight    #Edge label
E(g)$weight
E(g2b)$weight <- 1  #Initialize weight attribute
E(g)$weight <- 1  #Initialize weight attribute
g2bs <- simplify(g)
E(g2bs)$label=E(g2bs)$weight    #Edge label
set.seed(23);plot(g);set.seed(23);plot(g2bs)
g <- graph_from_literal(A-B:B:B,A-C:C:C,A-D:D,D-B-E,D-G-F:F,F-B,simplify=F)
set.seed(23);plot(g)
degree(g,"B")
E(g)$weight <- 1  #Initialize weight attribute
g2bs <- simplify(g)
E(g2bs)$label=E(g2bs)$weight    #Edge label
par(mfrow=c(1,2))
set.seed(23);plot(g);set.seed(23);plot(g2bs)
par(parSave)
degree(g2bs,"B")
strength(g2bs,"B")
library(igraph)
g <- graph_from_literal(A-B:B:B,A-C:C:C,A-D:D,D-B-E,D-G-F:F,F-B,simplify=F)
set.seed(23);plot(g)
degree(g,"B")
E(g)$weight <- 1  #Initialize weight attribute
g2bs <- simplify(g)
E(g2bs)$label=E(g2bs)$weight    #Edge label
par(mfrow=c(1,2))
set.seed(23);plot(g);set.seed(23);plot(g2bs)
par(parSave)
degree(g2bs,"B") # 4
strength(g2bs,"B") # 6
# Question No 2
# Question No 2
# degree 3 in is 1
# 1-3-4-1-2-7-1
# 1-3-4-1-2-7-1
# has repeated vertics
# 1-3-4-1-2-7-1
# has repeated vertics
# no repeated edge
E(g)$weight <- 1  #Initialize weight attribute
g2bs <- simplify(g)
E(g2bs)$label=E(g2bs)$weight    #Edge label
par(mfrow=c(1,2))
set.seed(23);plot(g);set.seed(23);plot(g2bs)
par(parSave)
degree(g2bs,"B") # 4
degree(g2bs,"B") # 4
# Only 1 neibour "E" has degree 1
neighbors(g,"B","all")
neighbors(g,"B","all")
###################################################################################
#
# Lecture4.R
#
###################################################################################
# External Functions
###################################################################################
library(igraph)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
weight_distribution<-function(g,cumulative = FALSE,...) {
if (!is_igraph(g)) {
stop("Not a graph object")
}
cs <- strength(g,...)
hi <- hist(cs, -1:max(cs), plot = FALSE)$density
if (!cumulative) {
res <- hi
}
else {
res <- rev(cumsum(rev(hi)))
}
res
}
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
iSave=igraph_options(annotate.plot=F,vertex.size=15,edge.arrow.size=.5)
options(stringsAsFactors = F)
#igraph_options(iSave)  #Back to the old values
#par(parSave)
###################################################################################
# Processing
###################################################################################
#Trees
###################################################################################
#Tree
treeg=graph_from_literal(8:9:10:11:12,8-9,8-10-11,10-12)
set.seed(23);plot(treeg)
plot(treeg,layout=layout_as_tree)
#Directed tree, no root
treedg=graph_from_literal(8:9:10:11:12,8-+10,9-+10-+12,11-+12)
set.seed(23);plot(treedg)
#This only looks good for rooted trees or undirected trees
plot(treedg,layout=layout_as_tree)
#Rooted tree
treeg=graph_from_literal(8:9:10:11,8-+9,8-+10-+11)
set.seed(23);plot(treeg)
plot(treeg,layout=layout_as_tree)
#Don't need arrows for a rooted tree
plot(treeg,layout=layout_as_tree,edge.arrow.mode=0)
(mt=make_tree(7, children=2))
V(mt)$name=1:7
plot(mt,layout=layout_as_tree)
#Forest
plot(union(treeg,mt),layout=layout_as_tree,main="Forest")
(ms=make_star(8,mode="out"))    #8-star
par(mfrow=c(1,2))
plot(ms)
plot(ms,layout=layout_as_star)
par(parSave)
###################################################################################
#Degree
###################################################################################
?degree
?igraph::degree
load("../data/karate.RData")     #Load karate network
load("C:\Users\Malik\Documents\GitHub\Network-and-Text-Analytics-\Data\karate.RData")
load("C:/Users/Malik/Documents/GitHub/Network-and-Text-Analytics-/Data/karate.RData")
#Load karate network
summary(karate)
#Mean degree
mean(degree(karate))             #c
2*gsize(karate)/gorder(karate)   #c=2m/n
#Degree distribution
table(degree(karate))
(fd=table(degree(karate))/gorder(karate))  #Degree distribution
gorder(karate)
?gorder()
degree(karate)
table(degree(karate))
treeg
plot(union(treeg,mt),layout=layout_as_tree,main="Forest")
# with simple tree
table(degree(mt))
mt
degree(mt)
degree(mt)
table(degree(mt))
source('~/GitHub/Network-and-Text-Analytics-/R-Code/lecture4.R', echo=TRUE)
fd_=table(degree(mt))/gorder(mt)
fd_
#This function includes degree zero and all in-between values; otherwise similar
degree_distribution(mt)
table(degree(karate))
(fd=table(degree(karate))/gorder(karate))  #Degree distribution
#This function includes degree zero and all in-between values; otherwise similar
degree_distribution(karate)
par(mfrow=c(1,2))
#plot a histogram of the degrees
hist(degree(karate))
#plot a histogram of the degrees
hist(degree(mt))
#plot a histogram of the degrees
hist(degree(mt))
#Plot the degree distribution
plot(0:max(degree(karate)),degree_distribution(karate),pch=20,xlab="degree",
ylab=NA,type='h')
#Plot the degree distribution
plot(0:max(degree(mt)),degree_distribution(mt),pch=20,xlab="degree",
ylab=NA,type='h')
#Plot the weighted degree distribution
E(karate)$weight
table(strength(karate))
hist(strength(karate))
plot(0:max(strength(karate)),weight_distribution(karate),pch=20,xlab="strength",
ylab=NA,type='h')
par(parSave)
#Average neighbor degree
knn(karate,weights=NA)
#Average neighbor degree
knn(mt,weights = NA)
plot(union(treeg,mt),layout=layout_as_tree,main="Forest")
#Average neighbor degree
knn(mt,weights = NA)
?knn()
sort(knn(mt,weights=NA)$knn,decreasing=T)   #This is all we need
knn(karate,weights=NA)
sort(knn(karate,weights=NA)$knn,decreasing=T)   #This is all we need
#Check for Mr. Hi
neighbors(karate,"Mr Hi")
neighbors(karate,"3")
#Check for 3
neighbors(mt,"3")
mean(degree(mt)[as.numeric(neighbors(mt,"3"))])
degree(mt)
as.numeric(neighbors(mt,"3")
as.numeric(neighbors(mt,"3"))
as.numeric(neighbors(mt,"3"))
degree(mt)[as.numeric(neighbors(mt,"3"))]
sort(knn(mt,weights=NA)$knn,decreasing=T)   #This is all we need
#Average neighbor degree
knn(mt,weights = NA)
sort(knn(mt,weights=NA)$knn,decreasing=T)   #This is all we need
#Check for 3
neighbors(mt,"3")
mean(degree(mt)[as.numeric(neighbors(mt,"3"))])
knn(karate,weights=NA)
sort(knn(karate,weights=NA)$knn,decreasing=T)   #This is all we need
#Check for Mr. Hi
neighbors(karate,"Mr Hi")
mean(degree(karate)[as.numeric(neighbors(karate,"Mr Hi"))])
#Average neighbor degree
knn(mt,weights = NA)
sort(knn(mt,weights=NA)$knn,decreasing=T)   #This is all we need
#Check for 3
neighbors(mt,"3")
mean(degree(mt)[as.numeric(neighbors(mt,"3"))])
mean(degree(mt)[as.numeric(neighbors(mt,"3"))]) # not getting same i think because mt is directerd and parrent is not considered as neibours
knn(karate,weights=NA)
sort(knn(karate,weights=NA)$knn,decreasing=T)   #This is all we need
#Check for Mr. Hi
neighbors(karate,"Mr Hi")
mean(degree(karate)[as.numeric(neighbors(karate,"Mr Hi"))])
#Directed network
load("C:/Users/Malik/Documents/GitHub/Network-and-Text-Analytics-/Data/aidsblog.RData")
#Directed network
load("C:/Users/Malik/Documents/GitHub/Network-and-Text-Analytics-/Data/aidsblog.RData")
#Load aidsblog data
summary(aidsblog)
set.seed(23);plot(aidsblog)
igraph_options(vertex.size=5,edge.arrow.size=.5)
set.seed(23);plot(aidsblog)
(di=degree(aidsblog,mode="in"))  #most vertices have only one outgoing edge
(do=degree(aidsblog,mode="out")) #most vertices have no outgoing edges
degree(aidsblog,mode="out")
#mean degrees
mean(di)                         #mean in-degree
mean(do)                         #mean out-degree
gsize(aidsblog)/gorder(aidsblog) #Cin=Cout=m/n
#Degree distribution
table(degree(aidsblog,mode="out"))
(fd=table(degree(aidsblog,mode="out"))/gorder(aidsblog))  #Degree distribution
degree_distribution(aidsblog,mode="out")
par(mfrow=c(1,2))
#plot a histogram of the out-degrees
hist(degree(aidsblog,mode="out"))
#Plot the out-degree distribution
plot(0:max(degree(aidsblog,mode="out")),degree_distribution(aidsblog,mode="out"),
pch=20,xlab="degree",ylab=NA,type='h')
#Plot the out-degree distribution
plot(0:max(degree(aidsblog,mode="out")),degree_distribution(aidsblog,mode="out"),
pch=20,xlab="degree",ylab=NA,type='h')
par(parSave)
###################################################################################
#
# HW4.R
#
###################################################################################
# External Functions
###################################################################################
library(igraph)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
iSave=igraph_options(annotate.plot=F,vertex.size=15,edge.arrow.size=.5)
options(stringsAsFactors = F)
#igraph_options(iSave)  #Back to the old values
#par(parSave)
###################################################################################
# Processing
###################################################################################
#1
tr=graph_from_literal(A-+X:R,B-+A:C,D-+O:K:M,E-+B:Q:G:H,H-+F,
J-+T,O-+N,P-+W,Q-+D:I:P:U,T-+L:S:Z,U-+J,W-+Y)
tr
igraph_options(vertex.size=10,edge.arrow.size=.5)
set.seed(11);plot(tr)
set.seed(11);plot(tr)
#a
#This is a rooted tree, and the root is E.
#b
plot(tr,layout=layout_as_tree)
#c
#Yes, Y is a descendant of Q
#d
#A and C are the children of B
#e
#The leaves are X,R,C,N,K,M,Y,I,L,S,Z,G,F
#f
gorder(tr);gsize(tr)
#c
#Yes, Y is a descendant of Q
#d
#A and C are the children of B
#e
#The leaves are X,R,C,N,K,M,Y,I,L,S,Z,G,F
#f
gorder(tr);gsize(tr)
#This tells us that the graph is a tree (m=n-1)
#g
table(degree(tr,mode="in"))
#Almost all vertices have one edge going into it, except one (the root)
gsize(tr)/gorder(tr)
#h
table(degree(tr,mode="out"))
hist(degree(tr,mode="out"))
plot(0:max(degree(tr,mode="out")),degree_distribution(tr,mode="out"),
pch=20,xlab="degree",ylab=NA,type='h',ylim=c(0,.6))
degree(tr,mode="in")
table(degree(tr,mode="in"))
mean(degree(tr,mode = 'in'))
#Almost all vertices have one edge going into it, except one (the root)
gsize(tr)/gorder(tr)
#h
table(degree(tr,mode="out"))
hist(degree(tr,mode="out"))
plot(0:max(degree(tr,mode="out")),degree_distribution(tr,mode="out"),
pch=20,xlab="degree",ylab=NA,type='h',ylim=c(0,.6))
#13 vertices have no outgoing edges; these are the leaves.
#The mean out-degree equals the mean in-degree, 0.96
#i
sort(degree(tr),decreasing=T)     #Q has the highest degree
degree(tr)
sort(degree(tr),decreasing=T)     #Q has the highest degree
sort(knn(tr)$knn, decreasing=T)   #I has avg. neighbor degree of 5
neighbors(tr,"I",mode="all")      #Just Q
#k
isg=induced_subgraph(tr,c("D","I","P","Q","U"))
set.seed(23);plot(isg)
plot(isg,layout=layout_as_star) #This is not working here
#l
