#igraph_options(iSave)  #Back to the old values
#par(parSave)
###################################################################################
# Processing
###################################################################################
#1
load("../data/g.RData")
#a
summary(g)
set.seed(23);plot(g)
#b
graph_attr(g)
vertex_attr(g)
edge_attr(g)
#c
gen=as.numeric(factor(V(g)$gender))
#c
gen=as.numeric(factor(V(g)$gender))
###################################################################################
#
# HW5.R
#
###################################################################################
# External Functions
###################################################################################
library(igraph)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
iSave=igraph_options(annotate.plot=F,vertex.size=15,edge.arrow.size=.5)
#options(stringsAsFactors = F)
#igraph_options(iSave)  #Back to the old values
#par(parSave)
###################################################################################
# Processing
###################################################################################
#1
load("../data/g.RData")
#a
summary(g)
set.seed(23);plot(g)
#b
graph_attr(g)
vertex_attr(g)
edge_attr(g)
#c
gen=as.numeric(factor(V(g)$gender))
gen=as.numeric(V(g)$gender=="M")+1     #Alternative method
#d
V(g)$shape=c("circle","square")[gen]
V(g)$color=c("pink","lightblue")[gen]
#e
E(g)$label=E(g)$group
#f
E(g)$color=as.numeric(factor(E(g)$group))
#g
V(g)$size=15*sqrt(degree(g))
#h
set.seed(23);plot(g, layout=layout_with_fr, palette=rainbow(3),main=g$name)
#i
legend("topright",c("female","male"),col=c("pink","lightblue"),pch=c(19,15))
load("C:/Users/Malik/Documents/GitHub/Network-and-Text-Analytics-/Data/g.RData")
#options(stringsAsFactors = F)
#igraph_options(iSave)  #Back to the old values
#par(parSave)
###################################################################################
# Processing
###################################################################################
#1
load("C:/Users/Malik/Documents/GitHub/Network-and-Text-Analytics-/Data/g.RData")
#a
summary(g)
set.seed(23);plot(g)
#b
graph_attr(g)
vertex_attr(g)
edge_attr(g)
#c
gen=as.numeric(factor(V(g)$gender))
gen=as.numeric(V(g)$gender=="M")+1     #Alternative method
factor(V(g)$gender)
as.numeric(factor(V(g)$gender))
gen=as.numeric(factor(V(g)$gender))
#d
V(g)$shape=c("circle","square")[gen]
V(g)$color=c("pink","lightblue")[gen]
#h
set.seed(23);plot(g, layout=layout_with_fr, palette=rainbow(3),main=g$name)
#i
legend("topright",c("female","male"),col=c("pink","lightblue"),pch=c(19,15))
load(kite)
data("kite")
summary(kite)
?kite
# Unditected graph
# 10 18
gorder(kite)
gsize(kite)
?kite
# Krackhardt's kite is a fictionary social network with ten actors.
# It is the smallest graph for which the most central actor is different
# according to the three classic centality measures: degree, closeness and betweenness.
graph_attr(kite)
edge_density(kite)
vertex_connectivity(kite)   #2
articulation_points(kite) # None
V(kite2)
kite2 = V(kite)
V(kite)
kite2 = V(kite) - "I"
V(kite)
kite2 = V(kite)[] - vertex("I")
kite2 = V(kite) - vertex("I")
kite2 = kite - vertex("I")
kite2
vertex_connectivity(kite2)
# vertex connectivity becomes 0
kite2 = kite - vertex("H")
vertex_connectivity(kite2)
##### Quiz 3 ######
###################################################################################
# External Functions
###################################################################################
library(igraph)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
getSubs<-function(g,split) {
if (class(g)!="igraph") stop("Must input a graph")
if (length(split)!=gorder(g)) stop("split must have a value for each vertex")
split=as.factor(split)
subs=list()
for (i in 1:length(levels(split))) {
subs[[i]]=induced_subgraph(g,which(as.numeric(split)==i))
}
subs
}
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
iSave=igraph_options(annotate.plot=F,vertex.size=15,edge.arrow.size=.5)
data("kite")
summary(kite)
# Unditected graph
#  order:10 size:18
gorder(kite)
gsize(kite)
?kite
# Krackhardt's kite is a fictionary social network with ten actors.
# It is the smallest graph for which the most central actor is different
# according to the three classic centality measures: degree, closeness and betweenness.
graph_attr(kite)
edge_density(kite) # 0.4
vertex_connectivity(kite)   #1
articulation_points(kite) # I and H
kite2 = kite - vertex("I")
vertex_connectivity(kite2)
kite2 = kite - vertex("H")
vertex_connectivity(kite2)
cfg=cluster_fast_greedy(kite)
cfg
class(cfg)               #Communities class
length(cfg)              #Number of subgraphs
sizes(cfg)               #Subgraph 1 has size 4, subgraph 2 has size 3
membership(cfg)
length(cfg)              #Number of subgraphs
sizes(cfg)
membership(cfg)
# plotting partioned sub graph
set.seed(23);plot(cfg,kite,main="A Partitioned Graph")
set.seed(23);plot(kite)
?kite
# Krackhardt's kite is a fictionary social network with ten actors.
# It is the smallest graph for which the most central actor is different
# according to the three classic centality measures: degree, closeness and betweenness.
graph_attr(kite)
edge_density(kite) # 0.4
vertex_connectivity(kite)   #1
articulation_points(kite) # I and H
kite2 = kite - vertex("I")
vertex_connectivity(kite2)
kite2 = kite - vertex("H")
vertex_connectivity(kite2)
cfg=cluster_fast_greedy(kite)
length(cfg)              #Number of subgraphs = 3
sizes(cfg)
membership(cfg)
# plotting partioned sub graph
set.seed(23);plot(cfg,kite,main="A Partitioned Graph")
# changing to 2 subgraphs
cut_at(cfg,2)
set.seed(23);plot(cfg,kite,main="A Partitioned Graph")
set.seed(23);plot(cfg,kite,main="A Partitioned Graph")
membership(cfg)
cut_at(cfg,2)
cfg
membership(cfg)
cut_at(cfg,2)
# changing to 2 subgraphs
(ca=cut_at(cfg,2))     #Membership if we only want 2 subgraphs
col=c("red","blue")[ca]
col
set.seed(23); plot(karate2, xlim=c(-.8,.8),ylim=c(-.8,.8),vertex.color=color)
set.seed(23); plot(kite, xlim=c(-.8,.8),ylim=c(-.8,.8),vertex.color=color)
set.seed(23); plot(kite, xlim=c(-.8,.8),ylim=c(-.8,.8),vertex.color=col)
# Krackhardt's kite is a fictionary social network with ten actors.
# It is the smallest graph for which the most central actor is different
# according to the three classic centality measures: degree, closeness and betweenness.
graph_attr(kite)
?kite
##### Quiz 3 ######
###################################################################################
# External Functions
###################################################################################
library(igraph)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
getSubs<-function(g,split) {
if (class(g)!="igraph") stop("Must input a graph")
if (length(split)!=gorder(g)) stop("split must have a value for each vertex")
split=as.factor(split)
subs=list()
for (i in 1:length(levels(split))) {
subs[[i]]=induced_subgraph(g,which(as.numeric(split)==i))
}
subs
}
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
iSave=igraph_options(annotate.plot=F,vertex.size=15,edge.arrow.size=.5)
data("kite")
summary(kite)
# Unditected graph
#  order:10 size:18
gorder(kite)
gsize(kite)
set.seed(23);plot(kite)
?kite
# Krackhardt's kite is a fictionary social network with ten actors.
# It is the smallest graph for which the most central actor is different
# according to the three classic centality measures: degree, closeness and betweenness.
graph_attr(kite)
edge_density(kite) # 0.4
vertex_connectivity(kite)   #1
articulation_points(kite) # I and H
kite2 = kite - vertex("I")
vertex_connectivity(kite2)
kite2 = kite - vertex("H")
vertex_connectivity(kite2)
cfg=cluster_fast_greedy(kite)
length(cfg)              #Number of subgraphs = 3
sizes(cfg)
membership(cfg)
# plotting partitioned sub graph
set.seed(23);plot(cfg,kite,main="A Partitioned Graph")
# changing to 2 subgraphs
(ca=cut_at(cfg,2))     #Membership if we only want 2 subgraphs
col=c("red","blue")[ca]
set.seed(23); plot(kite, xlim=c(-.8,.8),ylim=c(-.8,.8),vertex.color=col)
membership(cfg)[membership(cfg)==1]
membership(cfg)[membership(cfg)==1][1]
membership(cfg)[membership(cfg)==1][[1]]
V(kite)
ca
#Split
subs = getSubs(kite,ca )
subs
set.seed(23);plot(subs[[1]])
set.seed(23);plot(subs[[2]])
set.seed(23);plot(subs[[1][1]])
subs[[1]]
#Split
subs = getSubs(kite,ca)
set.seed(23);plot(subs[[1]])
set.seed(23);plot(subs[[2]])
subs = getSubs(g,V(g)$gender)
subs[[1]]
set.seed(23);plot(subs[[1]])
#Split
subs = getSubs(kite,ca)
edge_density(subs)
edge_density(subs[[1]])
edge_density(subs[[2]])
#Split
subs = getSubs(kite,ca)
edge_density(subs[[1]])
edge_density(subs[[2]])
set.seed(23);plot(subs[[1]])
set.seed(23);plot(subs[[2]])
set.seed(23); plot(kite,vertex.color=col)
set.seed(23);plot(subs[[1]])
set.seed(23);plot(subs[[2]])
subs[[1]]
graph_attr(subs[[1]])
subs[[1]]$layout
subs[[1]]$layout
subs[[1]] - subs[[1]]$layout
subs[[1]] = subs[[1]] - subs[[1]]$layout
subs[[1]]
graph_attr(subs[[1]])
set.seed(23);plot(subs[[1]])
s1 = subs[[1]]
s2 = subs[[2]]
edge_density(s1) # 0.4
#Split
subs = getSubs(kite,ca)
s1 = subs[[1]]
s2 = subs[[2]]
edge_density(s1) # 0.4
edge_density(s2) # 1
set.seed(23);plot(s1)
graph_attr(s1)
sn = s1 - s1$layout
sn
delete_graph_attr(s1, layout)
delete_graph_attr(s1, "layout")
s1
sn = delete_graph_attr(s1, "layout")
set.seed(23);plot(sn)
##### Quiz 3 ######
###################################################################################
# External Functions
###################################################################################
library(igraph)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
getSubs<-function(g,split) {
if (class(g)!="igraph") stop("Must input a graph")
if (length(split)!=gorder(g)) stop("split must have a value for each vertex")
split=as.factor(split)
subs=list()
for (i in 1:length(levels(split))) {
subs[[i]]=induced_subgraph(g,which(as.numeric(split)==i))
}
subs
}
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
iSave=igraph_options(annotate.plot=F,vertex.size=15,edge.arrow.size=.5)
data("kite")
summary(kite)
# Unditected graph
#  order:10 size:18
gorder(kite)
# Undirtected graph
#  order:10 size:18
gorder(kite)
gsize(kite)
set.seed(23);plot(kite)
?kite
# Krackhardt's kite is a fictionary social network with ten actors.
# It is the smallest graph for which the most central actor is different
# according to the three classic centality measures: degree, closeness and betweenness.
graph_attr(kite)
edge_density(kite) # 0.4
vertex_connectivity(kite)   #1
articulation_points(kite) # I and H
kite2 = kite - vertex("I")
vertex_connectivity(kite2)
kite2 = kite - vertex("H")
vertex_connectivity(kite2)
cfg=cluster_fast_greedy(kite)
length(cfg)              #Number of subgraphs = 3
sizes(cfg)
membership(cfg)
# plotting partitioned sub graph
set.seed(23);plot(cfg,kite,main="A Partitioned Graph")
# changing to 2 subgraphs
(ca=cut_at(cfg,2))     #Membership if we only want 2 subgraphs
col=c("red","blue")[ca]
set.seed(23); plot(kite,vertex.color=col)
#Split
subs = getSubs(kite,ca)
s1 = subs[[1]]
s2 = subs[[2]]
edge_density(s1) # 0.4
edge_density(s2) # 1
s2
s1 = subs[[1]]
s2 = subs[[2]]
edge_density(s1) # 0.4
edge_density(s2) # 1
set.seed(23);plot(s1)
graph_attr(s1)
sn = delete_graph_attr(s1, "layout")
set.seed(23);plot(sn)
set.seed(23);plot(s1)
# it does plot but the other vertics that are not present in subgraph1 are also get ploted
graph_attr(s1)
sn = delete_graph_attr(s1, "layout")
set.seed(23);plot(sn)
graph_attr(s1)
V(s1)
V(kite)
graph_attr(kite)$layout
V(sn)
graph_attr(kite)$layout[c(1,3,8:10)]
graph_attr(kite)$layout[1]
graph_attr(kite)$layout[c(1,3,8:10),]
V(kite)
graph_attr(kite)$layout
graph_attr(kite)
sn$layout = graph_attr(kite)$layout[c(1,3,8:10),]
set.seed(23);plot(sn)
set.seed(23);plot(kite)
set.seed(23); plot(kite,vertex.color=col)
sn$layout = graph_attr(kite)$layout[c(1,3,8:10),]
set.seed(23);plot(sn)
graph_attr(kite)$layout[c(1,3,8:10),]
V(kite)
graph_attr(kite)$layout
sn$layout = graph_attr(kite)$layout[c(1,3,6,8:10),]
set.seed(23);plot(sn)
set.seed(23); plot(kite,vertex.color=col)
V(sn)
sn$layout = graph_attr(kite)$layout[c(1,3,6,8:10),]
set.seed(23);plot(sn)
set.seed(23); plot(kite,vertex.color=col)
par(mfrow=c(1,2))
set.seed(23);plot(sn)
set.seed(23); plot(kite,vertex.color=col)
##### Quiz 3 ######
###################################################################################
# External Functions
###################################################################################
library(igraph)
library(igraphdata)
###################################################################################
# Internal Functions
###################################################################################
getSubs<-function(g,split) {
if (class(g)!="igraph") stop("Must input a graph")
if (length(split)!=gorder(g)) stop("split must have a value for each vertex")
split=as.factor(split)
subs=list()
for (i in 1:length(levels(split))) {
subs[[i]]=induced_subgraph(g,which(as.numeric(split)==i))
}
subs
}
###################################################################################
# Save the environment
###################################################################################
parSave=par(no.readonly = TRUE)
iSave=igraph_options(annotate.plot=F,vertex.size=15,edge.arrow.size=.5)
#igraph_options(iSave)  #Back to the old values
#par(parSave)
data("kite")
summary(kite)
# Undirtected graph
#  order:10 size:18
gorder(kite)
gsize(kite)
set.seed(23);plot(kite)
?kite
# Krackhardt's kite is a fictionary social network with ten actors.
# It is the smallest graph for which the most central actor is different
# according to the three classic centality measures: degree, closeness and betweenness.
graph_attr(kite)
edge_density(kite) # 0.4
vertex_connectivity(kite)   #1
articulation_points(kite) # I and H
kite2 = kite - vertex("I")
vertex_connectivity(kite2)
kite2 = kite - vertex("H")
vertex_connectivity(kite2)
# vertex connectivity becomes 0
cfg=cluster_fast_greedy(kite)
length(cfg)              #Number of subgraphs = 3
sizes(cfg)
membership(cfg)
# plotting partitioned sub graph
set.seed(23);plot(cfg,kite,main="A Partitioned Graph")
# changing to 2 subgraphs
(ca=cut_at(cfg,2))     #Membership if we only want 2 subgraphs
col=c("red","blue")[ca]
set.seed(23); plot(kite,vertex.color=col)
# it does not look like good good partitions. looks non symmetric. 3 groups w ere better
#Split
subs = getSubs(kite,ca)
s1 = subs[[1]]
s2 = subs[[2]]
edge_density(s1) # 0.4
edge_density(s2) # 1
# the 2nd one is dense graph
set.seed(23);plot(s1)
# it does plot but the other vertics that are not present in subgraph1 are also get ploted
graph_attr(s1)
sn = delete_graph_attr(s1, "layout")
set.seed(23);plot(sn)
# removing layout attribute fixes the problem
V(kite)
V(sn)
sn$layout = graph_attr(kite)$layout[c(1,3,6,8:10),]
par(mfrow=c(1,2))
set.seed(23);plot(sn)
set.seed(23); plot(kite,vertex.color=col)
